<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>채팅 애플리케이션</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .content {
            display: none;
        }
        .content.active {
            display: block;
        }
        .user-list {
            max-height: 300px;
            overflow-y: auto;
        }
        .chat-box {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            overflow: scroll;
        }
        .room-number {
            font-size: 14px;
            color: gray;
        }
        .mine{
            color: blue;
        }
    </style>
</head>
<body>

<div class="container mt-4">
    <!--네비게이션바 -->
    <div class="row mb-4">
        <div class="col-12 text-end">
            <button id="chatMenu" class="btn btn-primary me-2">Chat</button>
            <button id="userMenu" class="btn btn-secondary me-2">Users</button>
            <a href="/logout" class="btn btn-danger">Logout</a>
        </div>
    </div>

    <!-- 공개 Chat 섹션 -->
    <div id="chatSection" class="content active">
        <div class="row">
            <!-- 채팅 화면 -->
            <div class="col-md-8">
                <!-- 방 번호 표시 -->
                <p class="room-number">Room 번호: 1</p>

                <!-- 공개방 채팅 박스 -->
                <div class="chat-box public-chat-box mb-3">
                    <p><strong>Tester02:</strong> 샘플채팅</p>
                    <!-- 추가 채팅 내용 -->
                </div>

                <!-- 메시지 입력 폼 -->
                <form id="publicChatForm" class="input-group">
                    <input id="messageInput" type="text" class="form-control" placeholder="채팅 내용을 입력 후 Enter를 눌러주세요..." autocomplete="off">
                    <button class="btn btn-success">전송</button>
                </form>
            </div>

            <!-- 접속중 유저목록 -->
            <div class="col-md-4">
                <h4 id="userCount">현재 접속 중인 유저 (0명)</h4>
                <ul id="usersList" class="list-group user-list">
                    <li id="myIdTag" class="list-group-item mine">MyID</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Users 섹션 -->
    <div id="userSection" class="content">
        <h2>접속 중인 유저 목록 (나 제외)</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>가입 날짜</th>
                    <th>DM</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                <!-- 예시 데이터 -->
                <tr>
                    <td>샘플유저</td>
                    <td>가입날짜는 여기에 나옶니다</td>
                    <td><button class="btn btn-sm btn-info">DM</button></td>
                </tr>

                <!-- 추가 유저 정보 -->
            </tbody>
        </table>
    </div>

    <!-- 1:1 Chat 섹션(DM누르면 활성화) -->
    <div id="privateChatSection" class="content">
        <div class="row">
            <div class="col-md-10">
                <p id="opUsername">상대이름 나오는곳</p>
                <div class="chat-box private-chat-box mb-3">
                    <p><strong>MyID님이 입장</strong></p>
                    <p><strong>Tester02:</strong> Hi</p>
                    <p><strong>MyID:</strong> Hello</p>
                </div>

                <!-- 메시지 입력 폼 -->
                <form id="privateChatForm" class="input-group">
                    <input id="messageInput" type="text" class="form-control" placeholder="채팅 내용을 입력 후 Enter를 눌러주세요..." autocomplete="off">
                    <button class="btn btn-success">전송</button>
                </form>
            </div>

        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>

</script>

<script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>
<script>
  const socket = io();

  const myName = "<%= username %>"; //내 username
  let currentOpUsername = null; //현재 들어와 있는 채팅방의 상대 username(dm버튼 누르면 바뀜)
  let userCount = 0;    //현재 접속중인 유저 수

  const publicChatBox = document.querySelector('.public-chat-box');
  const privateChatBox = document.querySelector('.private-chat-box');
  const userTableBody = document.getElementById('userTableBody');   //users섹션의 유저목록
  const usersList = document.getElementById('usersList');
  const opNameTag = document.getElementById('opUsername');  //1:1채팅방 상단 상대이름
  const userCountTag = document.getElementById('userCount');
  
  function sendPublicMessage(message){
    socket.emit('publicMessage',{message:message,username:myName});
  }

  function sendPrivateMessage(message,event,receivingRoom){ //receivingUser로 하면는 나중에 room으로 전달할때 의미가 이상해질 수도?
    socket.emit('privateMessage',{receivingUser:receivingRoom,event:event,message:message})
  }

  // 특정 유저를 UI에 추가하는 함수 (공개 채팅방 및 Users 섹션)
    function addUserToUI(username, registerDate) {
        // Users 섹션에 리스트 추가
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
            <td>${username}</td>
            <td>${registerDate}</td>
            <td><button class="btn btn-sm btn-info dm-btn" data-username="${username}">DM</button></td>`;
        userTableBody.appendChild(newRow);

        // 접속 중인 유저 목록에도 추가
        const newUserItem = document.createElement('li');
        newUserItem.classList.add('list-group-item');
        newUserItem.textContent = username;
        usersList.appendChild(newUserItem);

        // DM 버튼 클릭 시 해당 유저의 이름을 currentOp로 설정하고 창 전환
        newRow.querySelector('.dm-btn').addEventListener('click', function () {

            currentOpUsername = this.getAttribute('data-username'); // DM 버튼의 data-username 속성에서 가져옴
            opNameTag.innerText = currentOpUsername;
            console.log(`현재 DM 상대: ${currentOpUsername}`);

            //쿠키에서 현재 상대 username에 해당하는 기록 있으면 과거&채팅창은 안켜져있지만 받고있던 채팅기록 전부 출력
            const pastMessages = getMessagesFromCookie(currentOpUsername);  //이 유저와 받았던/보냈던 메시지 기록
            if (pastMessages) {
                const messagesArray = pastMessages.split('\x2C '); // '\x2C'로 구분된 메시지들을 배열로 변환
                messagesArray.forEach(message => insertPrivateChat('',message));
            }

            document.getElementById('userSection').classList.remove('active');
            document.getElementById('chatSection').classList.remove('active');
            document.getElementById('privateChatSection').classList.add('active');
        });
    }

    //유저 접속 수 태그 글자 업데이트 함수
    function paintUserCount(){
        userCountTag.innerHTML = `현재 접속 중인 유저: ${userCount}명`
    }

    //공개채팅 추가 함수
    function insertPublicChat(message,username){
        publicChatBox.insertAdjacentHTML('beforeend',`<p id=myChat"><strong>${username}: ${message}</strong></p>`)
    }

    //1:1채팅 추가 함수(현재 1:1채팅중일때만 사용)
    function insertPrivateChat(message,username){
        privateChatBox.insertAdjacentHTML('beforeend',`<p id=myChat"><strong>${username}: ${message}</strong></p>`)
    }

    //1:1채팅 클린 함수
    function cleanPrivateChat(){
        privateChatBox.innerHTML='';
    }
  
  /* 초기 페인트, 버튼 이벤트 부착 등 */

  //input 읽어와서 공개 메시지 전송,표기하고 input 비우기
  document.querySelector('#publicChatForm button').addEventListener('click',(event)=>{
    event.preventDefault();

    const message = document.querySelector('#publicChatForm #messageInput').value;
    if(message.length==0)return;    //공백이면 리턴

    sendPublicMessage(message);
    document.querySelector('#publicChatForm #messageInput').value = '';
    
    publicChatBox.insertAdjacentHTML('beforeend',`<p id=myChat style="color:blue;"><strong>${message}</strong></p>`)
    publicChatBox.scrollTop = publicChatBox.scrollHeight;   //마지막에 스크롤 높이 맨밑으로

});

  //input 읽어와서 1:1 메시지 전송하고 input 비우기
  document.querySelector('#privateChatForm button').addEventListener('click',(event)=>{
    event.preventDefault();

    const message = document.querySelector('#privateChatForm #messageInput').value;
    if(message.length==0)return;

    sendPrivateMessage(message,'privateMessage',currentOpUsername);

    // 내 메시지도 '나: 메시지' 형태로 쿠키에 저장
    saveMessageInCookie(currentOpUsername, `나: ${message}`);

    document.querySelector('#privateChatForm #messageInput').value = '';
    privateChatBox.insertAdjacentHTML('beforeend',`<p id=myChat style="color:blue;"><strong>${message}</strong></p>`)
    privateChatBox.scrollTop = privateChatBox.scrollHeight; //마지막에 스크롤 높이 맨밑으로
});

  //섹션전환 2개
    document.getElementById('chatMenu').addEventListener('click', function() {
        document.getElementById('chatSection').classList.add('active');
        document.getElementById('userSection').classList.remove('active');
        currentOpUsername = null;   //1:1채팅방 나왔으니 현재 상대유저는 없음
        cleanPrivateChat();
    });

    document.getElementById('userMenu').addEventListener('click', function() {
        document.getElementById('userSection').classList.add('active');
        document.getElementById('chatSection').classList.remove('active');
        currentOpUsername = null;   //1:1채팅방 나왔으니 현재 상대유저는 없음
        cleanPrivateChat();
    });

  document.getElementById('myIdTag').innerHTML = myName;


  /*소켓 수신 이벤트*/
  
  //처음 접속 시 기존에 접속해 있었던 유저들을 ui 목록에 추가
  socket.on('existingUsers', (users) => {
        users.forEach(user => {
            addUserToUI(user.username, user.registerDate);
      });

      //현재 유저 카운트 변경
      userCount= users.length+1;    //나 포함
      paintUserCount();
  });

  //새로운 유저 연결되었을 때 처리
  socket.on('userJoin',(data)=>{
    let registerDate = null;
    let username = null;
    if(myName!=data.username){  //내 이름이 아니라면
        username = data.username;
        registerDate = data.registerDate;

        addUserToUI(username,registerDate);

        //현재 유저 카운트 변경
        userCount++;
        paintUserCount();
    }
  })

  //유저 나감 처리
  socket.on('userLeft',(username)=>{

    //Users 섹션의 유저 바와 공개 채팅방의 유저 이름 삭제
    const userRows = userTableBody.querySelectorAll('tr');
    userRows.forEach(row => {
        // row.firstElementChild.textContent: 첫 번째 <td>의 텍스트가 username과 일치하는지 확인
        if (row.firstElementChild.textContent === username) {
            row.remove();
        }
    });

    const userItems = usersList.querySelectorAll('.list-group-item');
    userItems.forEach(item => {
        if (item.textContent == username) {
            item.remove();
        }
    });

    //현재 유저 카운트 변경
    userCount--;
    paintUserCount();
  })

  //전체채팅 수신 처리
  socket.on('publicMessage',(data)=>{
    if(data.username!=myName){  //내가 보낸 메시지가 아니라면 화면에 출력
        insertPublicChat(data.message,data.username);
    }
  })

  //1:1채팅 수신 처리
  socket.on('privateMessage',(data)=>{
    const sentUser =data.from;
    const message = data.message;
    const event = data.event;
    console.log(`${sentUser}로부터: ${message}`);

    //받은 메시지들은 쿠키에 발신유저와 메시지를 저장
    saveMessageInCookie(sentUser, `${sentUser}: ${message}`);

    //현재 채팅중인 유저와 채팅을 보낸 유저가 같다면 바로 출력도 함
    if(sentUser == currentOpUsername){
        insertPrivateChat(message,currentOpUsername);
    }
  })

    // 메시지를 쿠키에 저장하는 함수 (보낸 사람과 메시지를 함께 저장)
    function saveMessageInCookie(username, message) {
        let existingMessages = getMessagesFromCookie(username);
        
        if (existingMessages) {
            // 기존 메시지가 있으면 새 메시지를 추가 (쉼표를 \x2C로 대체)
            existingMessages += `\x2C ${message}`;
        } else {
            existingMessages = message;
        }

        document.cookie = `${username}=${encodeURIComponent(existingMessages)}; path=/; max-age=86400`;
    }

    // 쿠키에서 특정 유저 메시지를 가져오는 함수
    function getMessagesFromCookie(username) {
        const cookies = document.cookie.split('; ');
        for (let cookie of cookies) {
            const [key, value] = cookie.split('=');
            if (key === username) {
                return decodeURIComponent(value);
            }
        }
        return null;
    }
</script>
</body>
</html>